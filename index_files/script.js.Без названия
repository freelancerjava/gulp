"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import React from 'react';
// import ReactDOM from 'react-dom';

var Link = function (_React$Component) {
  _inherits(Link, _React$Component);

  function Link(props) {
    _classCallCheck(this, Link);

    return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).call(this, props));
  }

  _createClass(Link, [{
    key: "render",
    value: function render() {
      return React.createElement(
        "div",
        { className: "link card" },
        React.createElement(
          "a",
          { href: this.props.link,
            className: "btn btn-link" },
          " ",
          this.props.value,
          " "
        ),
        " "
      );
    }
  }]);

  return Link;
}(React.Component);

var List = function (_React$Component2) {
  _inherits(List, _React$Component2);

  function List() {
    _classCallCheck(this, List);

    return _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).apply(this, arguments));
  }

  _createClass(List, [{
    key: "render",
    value: function render() {
      return React.createElement(
        "div",
        null,
        React.createElement(
          "div",
          { className: "jumbotron opacity_container" },
           React.createElement(Link, { link: "https://freelancerjava.github.io/portfolio/textile1/",
            value: "Textile factory site" }),
          React.createElement(Link, { link: "https://freelancerjava.github.io/portfolio/ronc/",
            value: "Medical Clinic site" }),
          React.createElement(Link, { link: "https://freelancerjava.github.io/portfolio/ovk/",
            value: "OVK Building site" }),
          React.createElement(Link, { link: "https://freelancerjava.github.io/portfolio/jobhunter/",
            value: "Job Hunter site" })
        )
      );
    }
  }]);

  return List;
}(React.Component);

var Title = function (_React$Component3) {
  _inherits(Title, _React$Component3);

  function Title() {
    _classCallCheck(this, Title);

    return _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).apply(this, arguments));
  }

  _createClass(Title, [{
    key: "render",
    value: function render() {
      return React.createElement(
        "div",
        null,
        React.createElement(
          "div",
          { className: "top_title" },
          React.createElement(
            "h1",
            null,
            " This is the portfolio of our company! "
          ),
          " ",
          React.createElement(
            "h2",
            null,
            " You are welcome! "
          ),
          " "
        ),
        " "
      );
    }
  }]);

  return Title;
}(React.Component);

var Container = function (_React$Component4) {
  _inherits(Container, _React$Component4);

  function Container() {
    _classCallCheck(this, Container);

    return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
  }

  _createClass(Container, [{
    key: "render",
    value: function render() {
      return React.createElement(
        "div",
        { className: "inner_content" },
        React.createElement(
          "div",
          { className: "logo" },
          React.createElement(
            "svg",
            { width: "225", height: "100", viewBox: "0 0 225 100", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
            React.createElement("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M96.1355 34.1334L74.8808 56.682L69.8161 64.777L61.8658 72.7273L60.8529 75.1873L53.0473 83.8611L49.4127 90.2622L60.9976 85.4529L65.4835 79.5284L68.3776 79.6647L70.5397 77.6472L79.8008 66.9475L84.7378 63.5853L101.203 44.733C98.4691 46.3767 95.5984 47.7919 92.62 48.9615L91.8795 49.8127C87.3 54.9653 83.8951 58.6539 81.665 60.8784C80.2185 62.4458 78.6251 63.8711 76.9067 65.1345C76.0938 65.6689 75.1469 65.964 74.1743 65.9857C73.5904 66.0161 73.0181 65.8141 72.5826 65.424C72.3777 65.2201 72.2186 64.9751 72.1159 64.705C72.0132 64.4349 71.9691 64.1461 71.9867 63.8577C71.9867 61.8488 73.7572 59.5306 77.2983 56.9033C79.01 55.6182 80.8043 54.4467 82.6694 53.3964C84.8542 52.1309 87.3 50.8682 90.0068 49.6084L101.073 35.8103C100.012 36.0747 99.0062 36.5242 98.1018 37.1382L97.7867 37.3744C96.8145 38.1024 95.4679 39.1111 93.7776 40.4495V39.8876C95.1078 38.7156 96.5312 37.6538 98.0337 36.7126C99.0479 36.1096 100.147 35.662 101.294 35.3848H104.699L93.4797 48.0933C96.0235 47.0935 98.4661 45.8538 100.775 44.3905C101.313 44.0651 101.846 43.7322 102.374 43.392L104.877 40.526L107.125 39.9047L114.232 31.9543L132.167 9.2782L134.159 4.34119L132.865 1.88123L129.103 0L128.669 2.31531L127.366 3.61768L123.315 7.51611L108.427 21.11H105.967L96.7143 31.0946L96.1355 34.1334ZM83.0354 58.3929L86.3807 54.3496C87.2489 53.2544 88.2136 51.9606 89.2748 50.4681C85.711 52.3068 82.8254 53.89 80.618 55.2179C78.5642 56.4196 76.6513 57.847 74.9149 59.474C73.3231 61.0061 72.523 62.4531 72.523 63.7981C72.4866 64.0299 72.5056 64.2671 72.5782 64.4902C72.6509 64.7134 72.7753 64.9163 72.9413 65.0822C73.1072 65.2482 73.3101 65.3726 73.5332 65.4452C73.7564 65.5179 73.9935 65.5369 74.2254 65.5005C76.1378 65.5288 79.0745 63.1597 83.0354 58.3929ZM107.669 28.0898C108.291 28.0898 108.597 28.3878 108.597 28.941C108.593 29.2798 108.463 29.6047 108.231 29.8519C108.128 29.9788 107.998 30.0818 107.851 30.1538C107.704 30.2258 107.544 30.2651 107.38 30.2689C107.124 30.2646 106.876 30.1781 106.673 30.0221C106.653 30.0106 106.634 29.9982 106.615 29.9846C106.598 29.9723 106.582 29.9592 106.566 29.9453C106.519 29.9042 106.478 29.8564 106.444 29.8033C106.386 29.7129 106.351 29.6099 106.341 29.5029C106.347 29.1362 106.493 28.7859 106.75 28.524C106.863 28.3896 107.004 28.2812 107.162 28.2064C107.321 28.1315 107.494 28.0917 107.669 28.0898ZM47.3017 53.6261L69.365 59.0398C69.365 59.0398 69.365 59.142 69.2969 59.2527L57.9503 63.5087C50.3859 61.636 42.8215 59.786 35.2571 57.9587C32.9856 57.4014 30.7173 56.8473 28.45 56.2935L28.3778 56.2759L28.348 56.2686L28.31 56.2594C23.2833 55.0312 18.2613 53.8042 13.2193 52.5452L0 49.3701L12.1808 45.114L23.8764 40.9517L63.8407 26.8812L80.3967 20.6674C81.5489 23.0784 82.3651 25.6359 82.8226 28.2687L63.8407 34.7633L45.6929 41.1475L26.5833 47.8379L25.4682 48.255L27.0344 48.6381L46.0504 53.2942L47.3017 53.6261ZM141.99 58.9462C142.441 61.5804 143.258 64.1389 144.416 66.5475L160.972 60.3677L200.885 46.3142L212.581 42.1859L224.762 37.9298L211.542 34.7037C207.865 33.8015 204.194 32.9077 200.523 32.0139C196.853 31.1201 193.182 30.2263 189.505 29.3241L188.447 29.059C181.256 27.2571 174.05 25.4515 166.837 23.7231L155.49 28.0303C155.49 28.0984 155.49 28.1665 155.422 28.2346L197.787 38.5768L199.353 38.9598L198.238 39.377L160.972 52.494L141.99 58.9462ZM126.839 0L127.537 0.697998L126.839 2.80054L108.333 19.714H106.231L126.839 0ZM65.9176 78.0814L62.8788 75.3319V73.9189L66.0623 75.3319L68.0882 78.0814H65.9176ZM48.6163 94.7798L50.2823 95.7417C50.8356 96.0612 51.2393 96.5873 51.4047 97.2043C51.57 97.8215 51.4834 98.479 51.164 99.0323C50.9089 99.4741 50.4887 99.7966 49.9959 99.9286C49.5031 100.061 48.978 99.9916 48.5361 99.7365C47.9828 99.417 47.5791 98.8909 47.4138 98.2738C47.2484 97.6566 47.335 96.9991 47.6544 96.4458L48.6163 94.7798ZM74.1573 39.9557L74.2339 40.5176C76.1589 38.825 78.2558 37.3386 80.4903 36.0828C80.3201 36.2445 80.1413 36.4318 79.954 36.6276C79.7668 36.8232 79.5625 37.0276 79.3412 37.2318C75.3291 41.0056 73.3231 44.104 73.3231 46.5271C73.3003 46.693 73.3163 46.8621 73.37 47.0208C73.4237 47.1794 73.5135 47.3235 73.6323 47.4415C73.7512 47.5596 73.8959 47.6483 74.0549 47.7008C74.214 47.7534 74.3831 47.7683 74.5489 47.7443C75.9619 47.7443 77.7835 46.9697 80.0136 45.4034C82.437 43.6996 84.7538 41.849 86.951 39.8621V39.2662C84.8008 41.2269 82.5262 43.0466 80.1413 44.714C77.6841 46.4164 75.8399 47.2676 74.6084 47.2676C74.1573 47.2676 73.9871 46.9783 74.1573 46.4164C74.4169 45.7321 74.8238 45.1132 75.349 44.6034L84.1165 35.3848H80.7712C78.4306 36.7017 76.2166 38.2318 74.1573 39.9557ZM87.9384 28.9581C87.9384 28.3282 87.6546 28.0133 87.0872 28.0133C87.0012 28.0149 86.9159 28.0253 86.8325 28.0442C86.7448 28.0641 86.6591 28.0935 86.5771 28.1318C86.4173 28.2065 86.275 28.3141 86.1594 28.4474C85.9079 28.6884 85.7611 29.0186 85.7508 29.3667C85.7508 29.937 86.0827 30.2179 86.7552 30.2179C86.9135 30.222 87.071 30.1931 87.2176 30.1331C87.2864 30.1049 87.3521 30.0701 87.4139 30.0292C87.4836 29.9832 87.5482 29.9294 87.6064 29.8689C87.8325 29.6207 87.9518 29.2936 87.9384 28.9581ZM131.708 39.1556V39.7515C131.151 40.4579 130.447 41.0336 129.644 41.438C129.031 41.7467 128.372 41.9498 127.695 42.0405C127.716 41.9877 127.739 41.9352 127.762 41.8828C127.812 41.7686 127.865 41.6558 127.922 41.5448C129.223 41.3392 130.485 40.5428 131.708 39.1556ZM127.922 41.5448C127.695 41.5806 127.467 41.5985 127.239 41.5985C126.949 41.6074 126.66 41.5613 126.387 41.4624C127.421 40.3068 128.059 38.8517 128.209 37.3085C128.209 35.8359 127.358 35.1039 125.655 35.1039C123.76 35.1843 121.903 35.666 120.208 36.5168C118.233 37.3977 116.438 38.6357 114.913 40.1686C114.271 40.7512 113.75 41.455 113.381 42.2394C113.011 43.0238 112.8 43.8734 112.76 44.7395C112.749 45.2738 112.869 45.8026 113.109 46.2803C113.349 46.7249 113.708 47.0934 114.147 47.3442C114.605 47.6089 115.125 47.7471 115.654 47.7443C118.542 47.7443 121.973 45.812 125.945 41.9475L126.541 42.0156L127.06 42.0923C127.273 42.0861 127.485 42.0687 127.695 42.0405C127.38 42.811 127.21 43.6338 127.196 44.4672C127.196 46.652 127.903 47.7443 129.316 47.7443C131.302 47.7443 134.014 46.127 137.453 42.8925C137.472 42.8948 137.49 42.9008 137.507 42.91C137.522 42.9186 137.535 42.9298 137.547 42.9435C137.562 42.9562 137.574 42.9716 137.583 42.9888C137.59 43.0012 137.595 43.0146 137.598 43.0286C137.006 44.156 136.652 45.3932 136.559 46.6632C136.559 47.3868 136.883 47.7443 137.53 47.7443C138.449 47.7556 139.905 47.0236 141.896 45.5482C143.888 44.0728 146.345 42.1405 149.268 39.7515V39.1556C147.157 40.9489 144.887 42.7477 142.458 44.5522C140.03 46.3568 138.506 47.2592 137.887 47.2592C137.422 47.2592 137.243 47.0719 137.351 46.6973C137.481 46.2823 137.683 45.8934 137.947 45.5482C138.369 44.9771 138.82 44.4287 139.3 43.9054C139.919 43.213 140.486 42.5831 141.003 42.0156L164.411 16.9136H161.364L141.301 38.4576C141.596 37.8822 141.737 37.2397 141.709 36.5935C141.709 35.589 141.079 35.0868 139.811 35.0868C137.942 35.1492 136.103 35.5651 134.389 36.3126C132.46 37.0645 130.717 38.2262 129.282 39.7174C128.727 40.2452 128.267 40.8635 127.922 41.5448ZM125.8 35.5975C124.413 35.5975 122.821 36.3296 121.025 37.8107C119.255 39.2684 117.635 40.8994 116.19 42.6796C114.771 44.4501 114.062 45.5453 114.062 45.9652C114.066 46.1534 114.119 46.3375 114.214 46.4999C114.309 46.6622 114.444 46.7976 114.607 46.8931C115.011 47.1476 115.483 47.275 115.96 47.2592C117.683 47.1097 119.328 46.4719 120.701 45.4205C122.525 44.2159 124.17 42.7603 125.587 41.0963C127 39.3939 127.698 38.1172 127.698 37.1638C127.704 36.9463 127.658 36.7305 127.565 36.5338C127.472 36.337 127.334 36.165 127.162 36.0316C126.773 35.7311 126.291 35.5773 125.8 35.5975ZM135.351 37.5979C137.232 36.2615 138.687 35.5975 139.7 35.5975H139.717C140.73 35.5975 141.241 36.0232 141.25 36.8829C141.25 37.7455 140.501 39.028 139.002 40.7303C137.483 42.4316 135.769 43.9487 133.895 45.2502C131.977 46.5895 130.473 47.2592 129.384 47.2592C129.223 47.2896 129.058 47.2811 128.901 47.2344C128.82 47.2101 128.742 47.1758 128.669 47.1324C128.603 47.0925 128.541 47.045 128.484 46.9907C128.367 46.8773 128.278 46.7374 128.226 46.5826C128.173 46.428 128.159 46.2629 128.184 46.1014C128.184 45.1652 128.907 43.8457 130.354 42.1433C131.828 40.4303 133.506 38.9038 135.351 37.5979Z", fill: "url(#paint0_linear)" }),
            React.createElement(
              "defs",
              null,
              React.createElement(
                "linearGradient",
                { id: "paint0_linear", x1: "145.804", y1: "16.9135", x2: "145.804", y2: "47.7444", gradientUnits: "userSpaceOnUse" },
                React.createElement("stop", { "stop-color": "#006BB2" }),
                React.createElement("stop", { offset: "1", "stop-color": "#00A0D7" })
              )
            )
          )
        ),
        React.createElement(Title, null),
        React.createElement(List, null)
      );
    }
  }]);

  return Container;
}(React.Component);

ReactDOM.render(React.createElement(Container, null), document.getElementById("root"));
