"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import React from 'react';
// import ReactDOM from 'react-dom';

var Link = function (_React$Component) {
  _inherits(Link, _React$Component);

  function Link(props) {
    _classCallCheck(this, Link);

    return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).call(this, props));
  }

  _createClass(Link, [{
    key: "render",
    value: function render() {
      return React.createElement(
        "div",
        { className: "link card" },
        React.createElement(
          "a",
          { href: this.props.link, className: "btn btn-link" },
          this.props.value
        )
      );
    }
  }]);

  return Link;
}(React.Component);

var List = function (_React$Component2) {
  _inherits(List, _React$Component2);

  function List() {
    _classCallCheck(this, List);

    return _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).apply(this, arguments));
  }

  _createClass(List, [{
    key: "render",
    value: function render() {
      return React.createElement(
        "div",
        null,
        React.createElement(
          "div",
          { className: "opacity_container" },
          React.createElement(
            "div",
            { className: "jumbotron" },
            React.createElement(Link, { link: "https://freelancerjava.github.io/portfolio/ronc/", value: "Medical Clinic site" }),
            React.createElement(Link, { link: "https://freelancerjava.github.io/portfolio/ovk/", value: "OVK Building site" }),
            React.createElement(Link, { link: "https://freelancerjava.github.io/portfolio/jobhunter/", value: "Job Hunter site" })
          )
        )
      );
    }
  }]);

  return List;
}(React.Component);

var Title = function (_React$Component3) {
  _inherits(Title, _React$Component3);

  function Title() {
    _classCallCheck(this, Title);

    return _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).apply(this, arguments));
  }

  _createClass(Title, [{
    key: "render",
    value: function render() {
      return React.createElement(
        "div",
        null,
        React.createElement(
          "div",
          { className: "top_title" },
          React.createElement(
            "h1",
            null,
            "This is the portfolio of our company!"
          ),
          React.createElement(
            "h2",
            null,
            "You are welcome!"
          )
        )
      );
    }
  }]);

  return Title;
}(React.Component);

var Container = function (_React$Component4) {
  _inherits(Container, _React$Component4);

  function Container() {
    _classCallCheck(this, Container);

    return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
  }

  _createClass(Container, [{
    key: "render",
    value: function render() {
      return React.createElement(
        "div",
        { className: "inner_content" },
        React.createElement(Title, null),
        React.createElement(List, null)
      );
    }
  }]);

  return Container;
}(React.Component);

ReactDOM.render(React.createElement(Container, null), document.getElementById("root"));